# TypeProf 0.13.0

# Classes
module Kernel
  private
  alias self.__raise__ self.raise
end

class Thread
  def self.start2: ?{ -> nil } -> untyped
  def self.start3: (Proc lam) -> untyped
end

class OptionParser
  alias set_banner banner=
  alias set_program_name program_name=
  alias set_summary_width summary_width=
  alias set_summary_indent summary_indent=
  alias to_s help
  alias def_option define
  alias def_head_option define_head
  alias def_tail_option define_tail

  class ParseError < RuntimeError
    alias to_s message
  end
end

module ALBase
  @@mutex_stderr: Thread::Mutex
  @@verbose: Integer
  @@validate: bool
  @@superuser: false

  def update_verbose: (Integer verbose) -> Integer
                    | (Integer verbose) -> Integer
  def self.update_verbose: (Integer verbose) -> Integer
                         | (Integer verbose) -> Integer
  def update_validate: (true validate) -> true
                     | (true validate) -> true
  def self.update_validate: (true validate) -> true
                          | (true validate) -> true
  def validation_enabled?: -> bool
                         | -> bool
  def self.validation_enabled?: -> bool
                              | -> bool
  def vlog: (String? str) -> nil
          | (String? str) -> nil
  def self.vlog: (String? str) -> nil
               | (String? str) -> nil
  def wlog: (String str) -> nil
          | (String str) -> nil
  def self.wlog: (String str) -> nil
               | (String str) -> nil
end

module ALTask
  include ALBase

  def report_failed: (ALReciever::Reporter reporter, String err) -> nil
                   | (ALReciever::Reporter reporter, String err) -> nil
end

class ALSocket
  include ALBase
  @mutex_input: Thread::Mutex
  @mutex_output: Thread::Mutex

  def initialize: (IO input, IO output) -> Thread::Mutex
  attr_reader input: IO
  attr_reader output: IO
  def gets: -> String?
  def puts: (String str) -> nil
  def responce: ({id: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, success: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, files: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, continue: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, taskid: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, result: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, error: Array[bot] | String | bool | {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}} data) -> nil
end

class ALLocalStorage < Hash[untyped, untyped]
end

class ALLocalStorageManager
  @collection: Hash[String, nil]

  def initialize: -> Hash[bot, bot]
  def []: (String key) -> nil
  def size: -> Integer
end

class ALReciever
  include ALBase
  @socket: ALSocket?
  @local_storage_manager: ALLocalStorageManager

  def initialize: (ALSocket? launcher_socket) -> ALLocalStorageManager
  def handle: ?{ (nil, Reporter, nil) -> nil } -> nil

  class Reporter
    include ALBase
    @socket: ALSocket?
    @id: untyped

    def initialize: (ALSocket? socket, untyped id) -> untyped
    def report: ({success: bool, files: Array[bot], continue: true, taskid: String, result: {exited: bool, exitstatus: Integer?, time: nil, out: untyped, err: untyped, box: String}, error: String} result) -> nil
  end
end

class BoxDir
  def initialize: (String dirname) -> String
  attr_reader dirname: String
end

class UserDir
  @key2box: Hash[String, BoxDir]
  @boxid_counter: Integer

  def initialize: (String dirname) -> Integer
  attr_reader dirname: String
  def new_dir: -> [String, String]
  def get_boxdir: (untyped key) -> String
  def delete_box: (untyped key) -> nil
  def exists?: (untyped key) -> bool
end

class DirectoryManager
  @key2userdir: Hash[untyped, UserDir]
  @work_directory: String

  def initialize: (String work_directory) -> String

  private
  def generate_userdirname: (untyped key) -> String

  public
  def install_user: (untyped user_key) -> UserDir
  def uninstall_user: (untyped user_key) -> nil
  def new_box: (untyped user_key) -> String
  def delete_box: (untyped user_key, untyped box_key) -> nil
  def get_boxdir: (untyped user_key, untyped box_key) -> String?
  def user_exists?: (untyped user_key) -> bool
  def box_exists?: (untyped user_key, untyped box_key) -> bool
end

class Tempfile
  alias delete unlink
  alias length size
end

class Executor
  @cmd: String
  @args: Array[bot]
  @timeout: Integer
  @chdir: String?

  def initialize: (?cmd: String, ?args: Array[bot], ?stdin: untyped, ?stdout: untyped, ?stderr: untyped, ?timeout: Integer, ?chdir: String?) -> nil
  attr_writer stdin: untyped
  attr_writer stdout: untyped
  attr_writer stderr: untyped
  def reset: -> nil
  def execute: (?bool noblock) ?{ (Process::Status?, nil) -> nil } -> [Integer?, Process::Status?, nil]
  def self.kill: (untyped pid) -> Integer
  attr_reader status: Process::Status?
end

class ALTaskExec
  include ALTask
  @box: untyped
  @command: untyped
  @arguments: Array[bot]
  @stdin: String
  @timeout: Integer

  def initialize: (untyped box, untyped command, Array[bot] arguments, String stdin, Integer timeout) -> Integer
  def self.from_json: (nil param) -> ALTaskExec?
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager directory_manager) -> nil
end

class ALTaskExecFileIO
  include ALTask
  @box: untyped
  @command: untyped
  @arguments: Array[bot]
  @stdin_path: untyped
  @stdout_path: untyped
  @stderr_path: untyped
  @timeout: Integer

  def initialize: (untyped box, untyped command, Array[bot] arguments, untyped stdin_path, untyped stdout_path, untyped stderr_path, Integer timeout) -> Integer
  def self.check_valid_filequery: (untyped path) -> untyped
  def self.from_json: (nil param) -> ALTaskExecFileIO?
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager directory_manager) -> nil
end

class ALTaskKill
  include ALTask
  @exec_task_id: untyped

  def initialize: (untyped exec_task_id) -> untyped
  def self.from_json: (nil param) -> ALTaskKill?
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager _directory_manager) -> nil
end

class ALTaskStore
  include ALTask
  @box: untyped
  @files: untyped

  def initialize: (untyped box, untyped files) -> untyped
  def self.from_json: (nil param) -> ALTaskStore?
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager directory_manager) -> nil

  class FileData
    def initialize: (untyped path, untyped data) -> untyped
    attr_accessor path: untyped
    attr_accessor data: untyped
    def self.check_valid_filequery: (untyped path) -> untyped
    def self.from_json: (untyped param) -> FileData?
  end
end

class ALTaskPull
  include ALTask
  @box: untyped
  @files: untyped

  def initialize: (untyped box, untyped files) -> untyped
  def self.from_json: (nil param) -> ALTaskPull?
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager directory_manager) -> nil

  class FileData
    def initialize: (untyped path, String data) -> String
    attr_accessor path: untyped
    attr_accessor data: String
    def self.check_valid_filequery: (untyped path) -> untyped
    def self.from_json: (untyped param) -> FileData?
  end
end

class ALTaskSetupBox
  include ALTask

  def self.from_json: (nil _param) -> ALTaskSetupBox
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager directory_manager) -> nil
end

class ALTaskCleanupBox
  include ALTask
  @box: untyped

  def initialize: (untyped box) -> untyped
  def self.from_json: (nil param) -> ALTaskCleanupBox?
  def action: (ALReciever::Reporter reporter, nil local_storage, DirectoryManager directory_manager) -> nil
end

module ALTaskFactory
  def self.from_json: (nil param) -> ((ALTaskCleanupBox | ALTaskExec | ALTaskExecFileIO | ALTaskKill | ALTaskPull | ALTaskSetupBox | ALTaskStore)?)
end

class AppLauncher
  include ALBase
  @config: {ipc: :stdio, loop: false, sockpath: nil, work_dir: String}
  @unix_server: UNIXServer

  def initialize: -> ((Array[(OptionParser::Arguable | String)?] | OptionParser::Arguable | String)?)
  def main: -> bot
end
